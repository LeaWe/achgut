library(igraph)
library(igraphdata)
el <- read.csv("ag.csv", header=TRUE)
is.data.frame(el)
el
eli <- graph.data.frame(el, directed = TRUE)
class(eli)
eli
plot(eli)
el <- read.csv("ag.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("nl.csv", header=T, as.is=T, sep = ",")
# prüft, ob alle Variablen eingelesen wurden
head(el)
head(nodes)
# wandelt die edgelist in eine Matrix um und baut das igraph-Objekt
hties <-as.matrix(el)
el <- graph_from_data_frame(d=hties, vertices=nodes, directed=T)
el
# addiert edges auf, wenn sie auf der gleichen Beziehung sind
h <- simplify(el, edge.attr.comb = list(weight="sum"))
# ruft das finale igraph-Objekt auf.
h
# einfache Visualisierung
plot(el)
edge_attr(el)
vertex_attr(el)
components(el)
is_connected(el)
diameter(el)
edge_density(el)
mean_distance(el)
gc <- cluster_walktrap(el)
modularity(el)
membership(el)
plot(gc, el, edge.arrow.size=.2)
list.edge.attributes(el)
el3 <- subgraph.edges(el, E(el)[relation == 3])
plot(el3)
el2 <- subgraph.edges(el, E(el)[relation == 2])
plot(el2)
el1 <- subgraph.edges(el, E(el)[relation == 1])
plot(el1)
####
list.edge.attributes(el)
edge_attr(el)
vertex_attr(el)
class(el)
####
degree(el, mode = "in")
degree(el, mode = "out")
plot(el,  vertex.label = NA, vertex.size=degree(el, mode="in")*1, edge.arrow.size=.2)
plot(el,  vertex.label = NA, vertex.size=degree(el, mode="out")*1, edge.arrow.size=.2)

degree(el, mode="in", normalized = TRUE)
centr_degree(el)$centralization
centr_clo(el, mode = "all")$centralization
centr_betw(el, directed = FALSE)$centralization
centr_eigen(el, directed = FALSE)$centralization
betweenness(el)
edge_betweenness(el)

plot(el, edge.arrow.size=.1, edge.width=E(el)$relation, vertex.label = NA, layout = layout_with_kk, main="relation")

el3 <- subgraph.edges(el, E(el)[relation == 3])
plot(el3, edge.arrow.size=.1, vertex.label = NA, layout = layout_with_kk, main="full text")
el2 <- subgraph.edges(el, E(el)[relation == 2])
plot(el2, edge.arrow.size=.1, vertex.label = NA, layout = layout_with_kk, main="teaser")
el1 <- subgraph.edges(el, E(el)[relation == 1])
plot(el1, edge.arrow.size=.1, vertex.label = NA, layout = layout_with_kk, main="link")

# analog dazu das Hilfsnetzwerk mit einem Gewicht von 3

el_salami <- delete_vertices(el, V(el)[sex != "1"])
plot(el_salami, edge.arrow.size=.1, layout = layout_with_kk, main="Salamiparty")
# führt zum gleichen Ergebnis, indem alle Vertex-Attribute in der Kategorie "sex", die nicht dem Wert "1" entsprechen gelöscht werden.

el_fem <- delete_vertices(el, V(el)[sex != "2"])
plot(el_fem, edge.arrow.size=.1, layout = layout_with_kk, main="Frauens")
